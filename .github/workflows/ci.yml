name: MLflow Project CI & Docker

on:
  push:
    paths:
      - 'MLproject/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

jobs:
  train-and-docker:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: mariouskono/workflow-ci
      DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Mengatur Python ke 3.12 untuk konsistensi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Menginstal versi yang tepat seperti yang ditemukan di artefak MLflow
          pip install "mlflow==3.1.0"
          pip install "cloudpickle==3.1.1"
          pip install "numpy==2.0.2"
          pip install "pandas==2.2.2"
          pip install "psutil==7.0.0"
          pip install "scikit-learn==1.6.1"
          pip install "scipy==1.15.3"
          pip install "joblib==1.3.2"
          pip install "python-dotenv==1.0.0"
          pip install dagshub
          pip install matplotlib
          pip install seaborn

      - name: Verify installation
        run: |
          python -c "import numpy, pandas, sklearn, matplotlib, seaborn, mlflow, joblib; print('âœ… All packages imported successfully')"

      - name: Run MLflow Project and Get Run ID
        id: mlflow_run_step
        run: |
          set -x # Mengaktifkan mode debug shell untuk melihat setiap perintah dieksekusi
          cd MLproject

          echo "### Debugging MLproject Directory and Script Execution ###"
          echo "--- Listing contents of MLproject/ with file types ---"
          ls -al . # Menampilkan semua file (termasuk tersembunyi) dengan detail tipe dan izin
          echo "--- Content of MLproject file (raw) ---"
          cat MLproject || echo "MLproject file not found or cannot be read." # Mencetak isi file MLproject
          echo "--- Attempting to run modelling.py directly ---"
          # Jalankan modelling.py secara langsung untuk melihat output/errornya.
          # set +e: Sementara menonaktifkan exit on error agar python error tidak langsung menghentikan shell.
          set +e
          python modelling.py --data_path dataset_tempat_wisata_bali_processed.csv
          PYTHON_DIRECT_RUN_EXIT_CODE=$? # Menangkap kode keluar dari eksekusi python langsung
          set -e # Mengaktifkan kembali exit on error
          echo "modelling.py direct run exit code: $PYTHON_DIRECT_RUN_EXIT_CODE"
          
          echo "--- Attempting MLflow Run with verbose output ---"
          # Set MLFLOW_VERBOSE=1 untuk logging yang lebih detail dari MLflow
          MLFLOW_RUN_OUTPUT=$(MLFLOW_VERBOSE=1 mlflow run . --env-manager=local 2>&1)
          echo "$MLFLOW_RUN_OUTPUT" # Mencetak output yang ditangkap dari mlflow run

          # Ekstraksi RUN_ID (hanya akan berfungsi jika mlflow run berhasil mencetak ID)
          RUN_ID=$(echo "$MLFLOW_RUN_OUTPUT" | grep "=== Run (ID" | awk -F"'" '{print $2}')
          echo "mlflow_run_id=$RUN_ID" >> $GITHUB_OUTPUT
        continue-on-error: true # Tetap aktifkan ini agar kita bisa melihat semua output debug meskipun ada kegagalan.

      - name: Build Docker Image from MLflow Model
        # Langkah ini hanya akan berjalan jika 'mlflow_run_id' berhasil diekstrak
        run: |
          cd MLproject
          # Menggunakan output run ID dari langkah sebelumnya
          mlflow models build-docker -m "mlruns/0/${{ steps.mlflow_run_step.outputs.mlflow_run_id }}/artifacts/tfidf_model" -n ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: MLproject/**/*.joblib
